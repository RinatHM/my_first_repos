Instruction
# Подсказка по GIT
Создание репозитория:
```sh
git init
```
Добавить к индексации:
```sh
git add
```
Зафиксировать изменения:
```sh
git commit -m 'Message текст'
```
Посмотреть лог в полном виде:
```sh
git log
```
поcмотреть лог в сокращённом виде:
```sh
git log --oneline
```
Перемещение по веткам:
```sh
git checkout <имя ветки>
```
Отображение всех веток:
```sh
git branch 
```
Переключение между ветками
```sh
git branch <branch_name>
```
Создание новой ветки:
```sh
git branch <имя_ветки>
```
удаление ненужной ветки
'''sh
git branch -d
'''
История коммитов с указанием веток
'''sh
git log --oneline --graph
'''
*Внесение дополнений по ГИТ доп ветка*
git merge - слияние веток
git rebase - перенос коммитов в основную ветку
Редактирование в ГИТХАБ - основная ветка
Перемещение HEAD по коммитам:
'''sh
git name^
'''
Можно использовать несколько ^^^ или задать число git branch -f main HEAD~3
Команда git reset в Git используется для изменения состояния текущей ветки и отмены коммитов,
 а также для перемещения указателя HEAD.
 git revert.
 Чтобы отменить изменения и поделиться отменёнными изменениями с остальными, надо использовать git revert.
 
 Cherry-pick
git cherry-pick <Commit1> <Commit2> <...>
Это очень простой и прямолинейный способ сказать, что ты хочешь копировать несколько коммитов на место, где сейчас находишься (HEAD).

Интерактивный rebase:Bсё, что нужно для интерактивного rebase - это опция -i
Если добавить эту опцию, Git откроет интерфейс просмотра того, какие коммиты готовы к копированию на цель rebase (target). Также
 показываются хеши коммитов и комментарии к ним, так что можно легко понять что к чему.
Для "реального" Git, этот интерфейс означает просто открытие файла в редакторе типа vim.

git commit --amend. Команда git commit --amend в Git позволяет внести изменения в последний коммит. Это может быть полезно, если вы забыли
 включить какие-то файлы в последний коммит, внести изменения в сообщение коммита или даже внести изменения в сам код.

ТЕГИ. Git предоставляет нам теги, чья основная задача – ссылаться постоянно на конкретный коммит.Важно, что после создания они никогда не сменят своего положения, так что можно с лёгкостью сделать checkout конкретного момента в истории изменений Если конкретный коммит не указан, гит пометит тегом HEAD.                   
Создание тега на commit c1:  git tag v1 c1                   В git есть команда, которая показывает, как далеко текущее состояние от ближайшего тега. И эта команда называется git describe. git describe выглядит примерно так:
git describe <ref>
Где ref — это что-либо, что указывает на конкретный коммит. Если не указать ref, то git будет считать, что указано текущее положение (HEAD).
Вывод команды выглядит примерно так:
<tag>_<numCommits>_g<hash>

Git Fetch скачивает изменеия в локальный репозиторий git fetch выполняет две и только две основные операции. А именно:
связывается с указанным удалённым репозиторием и забирает все те данные проекта, которых у вас ещё нет, при этом...
у вас должны появиться ссылки на все ветки из этого удалённого репозитория (например, o/main)

слияние Pull Request. запрос на слияние веток.